# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NoNameYetPluginDockWidget
                                 A QGIS plugin
 NoNameYetPlugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-19
        git sha              : $Format:%H$
        copyright            : (C) 2024 by CTU
        email                : jehlijos@cvut.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from .function import *

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import Qgis, QgsMapLayerProxyModel, QgsProject, QgsVectorLayer, QgsFeatureRequest, QgsApplication, QgsCoordinateTransformContext, QgsCoordinateTransform, QgsRectangle, QgsRasterLayer
from qgis.gui import QgsMessageBar
from qgis.analysis import QgsNativeAlgorithms
import processing
from qgis.analysis import QgsNativeAlgorithms

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'NoNameYetPlugin_dockwidget_base.ui'))


class NoNameYetPluginDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(NoNameYetPluginDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Set filter to map combobox to select only polygons
        self.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)

        self.AreaFlag = False  # False == computation in window extent (default), True == computation in polygon

        self.extentButton.toggled.connect(self.ToggleChangeToPolygon)
        self.polygonButton.toggled.connect(self.ToggleChangeToExtent)
        self.runButton.clicked.connect(self.Run)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def ToggleChangeToExtent(self):
        self.AreaFlag = True
        self.extentButton.setChecked(False)
        self.polygonLabel.setEnabled(True)
        self.mMapLayerComboBox.setEnabled(True)

    def ToggleChangeToPolygon(self):
        self.AreaFlag = False
        self.polygonButton.setChecked(False)
        self.polygonLabel.setEnabled(False)
        self.mMapLayerComboBox.setEnabled(False)

    def ErrorMsg(self, message):
        """
        Function to display error messages
        :param message: The message to be displayed
        :return:
        """
        iface.messageBar().pushMessage("Error", message, level=Qgis.Critical, duration=5)

    def LoadingMsg(self, msg):
        """
        Function to display loading messages
        :return:
        """
        iface.messageBar().pushMessage("Loading", msg, level=Qgis.Info, duration=0)

    def CloseLoadingMsg(self):
        """
        Function to close loading messages
        :return:
        """
        iface.messageBar().clearWidgets()

    def Run(self):
        """
        Function to run the plugin
        :return:
        """

        # Return current QGIS CRS
        crs = QgsProject.instance().crs().authid()
        # if EPSG is not 5514, return error
        if crs != 'EPSG:5514':
            self.ErrorMsg("Please change CRS to EPSG:5514")
            return

        FLAG = self.AreaFlag

        if FLAG:
            polygon = self.mMapLayerComboBox.currentLayer()

            # Ensure the processing plugin is loaded
            QgsApplication.processingRegistry().addProvider(QgsNativeAlgorithms())
        else:
            polygon = None

        self.LoadingMsg("Loading data, please wait...")
        layers, names = load_wfs_layers(FLAG, polygon)

        # ERROR HANDLING
        if layers == "ERR_missingconffile":
            self.CloseLoadingMsg()
            self.ErrorMsg("Missing or corrupted configuration file (zabagedlayers.conf)")
            return

        if layers == "ERR_plg":
            self.CloseLoadingMsg()
            self.ErrorMsg("Please select a polygon layer")
            return

        # Add the layers to the map with corresponding names
        for index, layer in enumerate(layers):
            QgsProject.instance().addMapLayer(layer)
            if FLAG:
                # Define parameters for the clip algorithm
                params = {
                    'INPUT': layer,
                    'OVERLAY': polygon,
                    'OUTPUT': 'memory:'
                }

                # Run the clip algorithm
                result = processing.run("native:clip", params)

                # Get the clipped layer
                clipped_layer = result['OUTPUT']

                # Replace the original layer with the clipped layer in the project
                QgsProject.instance().addMapLayer(clipped_layer)

                # Remove the original layer
                QgsProject.instance().removeMapLayer(layer.id())

                # Update the reference to the layer to the new clipped layer
                layer = clipped_layer

                # if the layer is empty, remove it
                if layer.featureCount() == 0:
                    QgsProject.instance().removeMapLayer(layer.id())
                    continue

            # Set the name of the layer
            layer.setName(names[index])
            layer.triggerRepaint()

        # Get the extent for raster download
        if FLAG:
            if polygon and polygon.isValid():
                current_extent = polygon.extent()
            else:
                self.CloseLoadingMsg()
                self.ErrorMsg("Invalid polygon layer")
                return
        else:
            current_extent = iface.mapCanvas().extent()

        # Load and add the raster layer
        if current_extent:
            raster_layer = load_raster_layer(current_extent)
            if raster_layer:
                print("Raster layer added to the map.")

        self.CloseLoadingMsg()
